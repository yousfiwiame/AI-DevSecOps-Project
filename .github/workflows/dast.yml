name: DAST - E-Commerce Security Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of scan to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - baseline
          - quick
  schedule:
    # Run weekly security scan
    - cron: '0 3 * * 1'  # Every Monday at 3 AM

jobs:
  dast-ecommerce:
    name: Dynamic Security Testing - E-Commerce App
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
      security-events: write
      issues: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Prepare test database
      run: |
        echo "Setting up test database..."
    
    - name: Start Flask E-Commerce Application
      run: |
        echo "Starting Flask E-Commerce App..."
        python app.py &
        APP_PID=$!
        echo "APP_PID=$APP_PID" >> $GITHUB_ENV
        
        echo "Waiting for application to start..."
        for i in {1..30}; do
          if curl -sf http://localhost:5000 > /dev/null 2>&1; then
            echo "E-Commerce app is running on http://localhost:5000"
            break
          fi
          echo "Attempt $i/30..."
          sleep 2
        done
        
        curl -v http://localhost:5000 || {
          echo "Application failed to start!"
          exit 1
        }
      env:
        FLASK_ENV: testing
        SECRET_KEY: test-secret-key-for-dast
    
    - name: Create reports directory
      run: mkdir -p reports/dast
    
    - name: OWASP ZAP Baseline Scan
      uses: zaproxy/action-full-scan@v0.10.0
      with:
        target: 'http://localhost:5000'
        cmd_options: '-a -j'
        allow_issue_writing: true
        fail_action: false
        rules_file_name: '.zap/rules.tsv'
        artifact_name: 'zapscan'
        
    
    - name: OWASP ZAP Full Scan
      uses: zaproxy/action-full-scan@v0.10.0
      with:
        target: 'http://localhost:5000'
        cmd_options: '-a -j'
        allow_issue_writing: true
        fail_action: false
        rules_file_name: '.zap/rules.tsv'
        artifact_name: 'zap-baseline'
        
    
    - name: Test Authentication Vulnerabilities
      run: |
        echo "Testing Authentication Security..."
        
        echo "Testing SQL Injection in login..."
        curl -X POST http://localhost:5000/login \
          -d "username=admin' OR '1'='1&password=anything" \
          -o reports/dast/auth-sqli-test.html \
          -w "\nHTTP Status: %{http_code}\n" || true
        
        echo "Testing brute force simulation..."
        for i in {1..5}; do
          curl -X POST http://localhost:5000/login \
            -d "username=test$i&password=wrong$i" \
            -w "Attempt $i: %{http_code}\n" >> reports/dast/brute-force-test.txt || true
        done
    
    - name: Test Shopping Cart Vulnerabilities
      run: |
        echo "Testing Shopping Cart Security..."
        
        echo "Testing negative quantity..."
        curl -X POST http://localhost:5000/add_to_cart \
          -d "product_id=1&quantity=-999" \
          -o reports/dast/cart-negative-quantity.html || true
        
        echo "Testing session security..."
        curl -X GET http://localhost:5000/cart \
          --cookie "session=fake-session-token" \
          -o reports/dast/cart-session-test.html || true