name: DAST Security Scan with OWASP ZAP

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  dast-scan:
    name: Dynamic Application Security Testing (DAST) with OWASP ZAP
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Start Flask Application
      run: |
        echo "Starting Flask application..."
        python app.py &
        sleep 10
        for i in {1..30}; do
          if curl -sf http://localhost:5000 > /dev/null 2>&1; then
            echo "Application is running on http://localhost:5000"
            break
          fi
          echo "Waiting for app... attempt $i/30"
          sleep 2
        done
        curl -v http://localhost:5000
      env:
        FLASK_ENV: testing
        SECRET_KEY: test-secret-key
    
    - name: Run OWASP ZAP Baseline Scan
      run: |
        echo "=========================================="
        echo "Running OWASP ZAP Baseline Scan"
        echo "=========================================="
        docker run --network="host" \
          ghcr.io/zaproxy/zaproxy:stable \
          zap-baseline.py -t http://localhost:5000 2>&1 | tee baseline_scan.log
        
        echo ""
        echo "Baseline scan completed!"
    
    - name: Parse Baseline Results
      if: always()
      run: |
        echo "Parsing baseline scan results..."
        
        # Count issues
        BASELINE_WARN=$(grep -c "^WARN-NEW:" baseline_scan.log 2>/dev/null || echo 0)
        BASELINE_FAIL=$(grep -c "^FAIL-NEW:" baseline_scan.log 2>/dev/null || echo 0)
        
        echo "BASELINE_WARN=$BASELINE_WARN" >> $GITHUB_ENV
        echo "BASELINE_FAIL=$BASELINE_FAIL" >> $GITHUB_ENV
        
        echo "Found: $BASELINE_FAIL failures, $BASELINE_WARN warnings"
    
    - name: Run OWASP ZAP Full Scan
      run: |
        echo "=========================================="
        echo "Running OWASP ZAP Full Scan"
        echo "=========================================="
        docker run --network="host" \
          ghcr.io/zaproxy/zaproxy:stable \
          zap-full-scan.py -t http://localhost:5000 2>&1 | tee full_scan.log
        
        echo ""
        echo "Full scan completed!"
    
    - name: Parse Full Scan Results
      if: always()
      run: |
        echo "Parsing full scan results..."
        
        # Count issues
        FULL_WARN=$(grep -c "^WARN-NEW:" full_scan.log 2>/dev/null || echo 0)
        FULL_FAIL=$(grep -c "^FAIL-NEW:" full_scan.log 2>/dev/null || echo 0)
        
        echo "FULL_WARN=$FULL_WARN" >> $GITHUB_ENV
        echo "FULL_FAIL=$FULL_FAIL" >> $GITHUB_ENV
        
        echo "Found: $FULL_FAIL failures, $FULL_WARN warnings"
    
    - name: Generate DAST Summary
      if: always()
      run: |
        # Calculate totals
        TOTAL_ISSUES=$((BASELINE_FAIL + BASELINE_WARN + FULL_FAIL + FULL_WARN))
        
        echo "=========================================="
        echo "DAST Scan Summary"
        echo "=========================================="
        echo "Baseline Scan: $BASELINE_FAIL failures, $BASELINE_WARN warnings"
        echo "Full Scan: $FULL_FAIL failures, $FULL_WARN warnings"
        echo "TOTAL ISSUES: $TOTAL_ISSUES"
        echo "=========================================="
        
        # Create GitHub Step Summary
        {
          echo "# 🔒 OWASP ZAP DAST Report"
          echo ""
          echo "## Total issues found: **$TOTAL_ISSUES**"
          echo ""
          echo "### Scan Results:"
          echo ""
          echo "| Scan Type | Failures | Warnings |"
          echo "|-----------|----------|----------|"
          echo "| Baseline  | $BASELINE_FAIL | $BASELINE_WARN |"
          echo "| Full Scan | $FULL_FAIL | $FULL_WARN |"
          echo ""
          echo "### 🚨 Vulnerabilities Found:"
          echo ""
        } >> $GITHUB_STEP_SUMMARY
        
        # Extract and display vulnerabilities
        if [ -f full_scan.log ]; then
          echo "**Warnings (Medium Severity):**" >> $GITHUB_STEP_SUMMARY
          grep "^WARN-NEW:" full_scan.log | sed 's/WARN-NEW: //' | cut -d'[' -f1 | sort -u | head -20 | while read vuln; do
            echo "- $vuln" >> $GITHUB_STEP_SUMMARY
          done
          
          if [ $FULL_FAIL -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Failures (High Severity):**" >> $GITHUB_STEP_SUMMARY
            grep "^FAIL-NEW:" full_scan.log | sed 's/FAIL-NEW: //' | cut -d'[' -f1 | sort -u | head -10 | while read vuln; do
              echo "- $vuln" >> $GITHUB_STEP_SUMMARY
            done
          fi
        fi
        
        {
          echo ""
          echo "---"
          echo "📊 **Full scan logs available in artifacts**"
        } >> $GITHUB_STEP_SUMMARY
    
    - name: Upload Scan Logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dast-scan-logs
        path: |
          baseline_scan.log
          full_scan.log
    
    - name: Display Final Summary
      if: always()
      run: |
        echo ""
        echo "╔════════════════════════════════════════╗"
        echo "║     DAST Security Scan Complete       ║"
        echo "╚════════════════════════════════════════╝"
        echo ""
        echo "📊 Results:"
        echo "   Baseline: $BASELINE_FAIL failures, $BASELINE_WARN warnings"
        echo "   Full Scan: $FULL_FAIL failures, $FULL_WARN warnings"
        echo ""
        echo "   TOTAL: $((BASELINE_FAIL + BASELINE_WARN + FULL_FAIL + FULL_WARN)) security issues found"
        echo ""
        echo "✅ Check the 'Summary' tab for detailed results"
        echo "📦 Download artifacts for complete scan logs"