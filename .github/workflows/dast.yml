name: DAST Security Scan with OWASP ZAP

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  dast-scan:
    name: Dynamic Application Security Testing (DAST) with OWASP ZAP
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Prepare reports directory
      run: mkdir -p reports
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Start Flask Application
      run: |
        echo "Starting Flask application..."
        python app.py &
        sleep 10
        for i in {1..30}; do
          if curl -sf http://localhost:5000 > /dev/null 2>&1; then
            echo "Application is running on http://localhost:5000"
            break
          fi
          echo "Waiting for app... attempt $i/30"
          sleep 2
        done
        curl -v http://localhost:5000
      env:
        FLASK_ENV: testing
        SECRET_KEY: test-secret-key
    
    - name: Run OWASP ZAP Baseline Scan
      run: |
        echo "Running OWASP ZAP Baseline scan..."
        docker run --network="host" -v $(pwd)/reports:/zap/wrk/:rw \
          ghcr.io/zaproxy/zaproxy:stable \
          zap-baseline.py -t http://localhost:5000 \
          -r zap-baseline-report.html \
          -J zap-baseline-report.json \
          -w zap-baseline-report.md || true
        echo "Baseline scan completed"
    
    - name: Run OWASP ZAP Full Scan
      run: |
        echo "Running OWASP ZAP Full scan..."
        docker run --network="host" -v $(pwd)/reports:/zap/wrk/:rw \
          ghcr.io/zaproxy/zaproxy:stable \
          zap-full-scan.py -t http://localhost:5000 \
          -r zap-full-scan-report.html \
          -J zap-full-scan-report.json \
          -w zap-full-scan-report.md || true
        echo "Full scan completed"
    
    - name: Generate DAST Summary Report
      run: |
        echo "Generating DAST summary from scan results..."
        
        # Install jq for JSON parsing
        sudo apt-get update && sudo apt-get install -y jq
        
        # Initialize counters
        BASELINE_HIGH=0
        BASELINE_MEDIUM=0
        BASELINE_LOW=0
        BASELINE_INFO=0
        FULL_HIGH=0
        FULL_MEDIUM=0
        FULL_LOW=0
        FULL_INFO=0
        
        # Parse baseline scan results
        if [ -f reports/zap-baseline-report.json ]; then
          BASELINE_HIGH=$(jq '[.site[0].alerts[] | select(.riskcode == "3")] | length' reports/zap-baseline-report.json 2>/dev/null || echo 0)
          BASELINE_MEDIUM=$(jq '[.site[0].alerts[] | select(.riskcode == "2")] | length' reports/zap-baseline-report.json 2>/dev/null || echo 0)
          BASELINE_LOW=$(jq '[.site[0].alerts[] | select(.riskcode == "1")] | length' reports/zap-baseline-report.json 2>/dev/null || echo 0)
          BASELINE_INFO=$(jq '[.site[0].alerts[] | select(.riskcode == "0")] | length' reports/zap-baseline-report.json 2>/dev/null || echo 0)
        fi
        
        # Parse full scan results
        if [ -f reports/zap-full-scan-report.json ]; then
          FULL_HIGH=$(jq '[.site[0].alerts[] | select(.riskcode == "3")] | length' reports/zap-full-scan-report.json 2>/dev/null || echo 0)
          FULL_MEDIUM=$(jq '[.site[0].alerts[] | select(.riskcode == "2")] | length' reports/zap-full-scan-report.json 2>/dev/null || echo 0)
          FULL_LOW=$(jq '[.site[0].alerts[] | select(.riskcode == "1")] | length' reports/zap-full-scan-report.json 2>/dev/null || echo 0)
          FULL_INFO=$(jq '[.site[0].alerts[] | select(.riskcode == "0")] | length' reports/zap-full-scan-report.json 2>/dev/null || echo 0)
        fi
        
        BASELINE_TOTAL=$((BASELINE_HIGH + BASELINE_MEDIUM + BASELINE_LOW + BASELINE_INFO))
        FULL_TOTAL=$((FULL_HIGH + FULL_MEDIUM + FULL_LOW + FULL_INFO))
        
        # Create text summary
        cat > reports/dast-summary.txt << EOF
        ================================================================
        OWASP ZAP DAST Security Scan Summary
        ================================================================
        
        BASELINE SCAN: ${BASELINE_TOTAL} issues found
        - High:     ${BASELINE_HIGH}
        - Medium:   ${BASELINE_MEDIUM}
        - Low:      ${BASELINE_LOW}
        - Info:     ${BASELINE_INFO}
        
        FULL SCAN: ${FULL_TOTAL} issues found
        - High:     ${FULL_HIGH}
        - Medium:   ${FULL_MEDIUM}
        - Low:      ${FULL_LOW}
        - Info:     ${FULL_INFO}
        ================================================================
        EOF
        
        cat reports/dast-summary.txt
        
        # Create GitHub Step Summary
        echo "# ðŸ”’ OWASP ZAP DAST Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Total issues found: $FULL_TOTAL" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Severity Breakdown (Full Scan):" >> $GITHUB_STEP_SUMMARY
        echo "- **ðŸ”´ HIGH**: $FULL_HIGH" >> $GITHUB_STEP_SUMMARY
        echo "- **ðŸŸ  MEDIUM**: $FULL_MEDIUM" >> $GITHUB_STEP_SUMMARY
        echo "- **ðŸŸ¡ LOW**: $FULL_LOW" >> $GITHUB_STEP_SUMMARY
        echo "- **ðŸ”µ INFO**: $FULL_INFO" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add top vulnerabilities to summary
        echo "### ðŸš¨ High & Medium Severity Issues:" >> $GITHUB_STEP_SUMMARY
        if [ -f reports/zap-full-scan-report.json ]; then
          jq -r '.site[0].alerts[] | select(.riskcode == "3" or .riskcode == "2") | "- **\(.risk)** \(.name) â†’ \(.instances[0].uri // "Multiple locations")"' reports/zap-full-scan-report.json 2>/dev/null >> $GITHUB_STEP_SUMMARY || echo "No high/medium issues found" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "ðŸ“Š **Download the full reports from artifacts for detailed information**" >> $GITHUB_STEP_SUMMARY
    
    - name: Upload DAST reports
      uses: actions/upload-artifact@v4
      with:
        name: dast-reports
        path: |
          reports/zap-baseline-report.*
          reports/zap-full-scan-report.*
          reports/dast-summary.txt
    
    - name: Display DAST Results
      run: |
        echo "## DAST Scan Completed"
        cat reports/dast-summary.txt